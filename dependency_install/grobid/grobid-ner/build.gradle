plugins {
    id 'java'
    id 'maven'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/rookies/maven" }
    maven { url "http://oss.jfrog.org/artifactory/libs-snapshot" }
    maven { url "http://oss.jfrog.org/artifactory/libs-release" }
    flatDir {
        dirs 'localLibs'
    }
}


dependencies {
    compile 'org.grobid:grobid-core:0.6.0'
    compile 'org.grobid:grobid-trainer:0.6.0'
    compile 'commons-pool:commons-pool:1.6'
    compile 'commons-io:commons-io:2.5'
    compile 'org.apache.commons:commons-lang3:3.6'
    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.codehaus.woodstox:stax2-api:3.1.4'
    compile 'org.codehaus.woodstox:woodstox-core-asl:4.4.0'
    compile 'com.googlecode.clearnlp:clearnlp:1.3.1'

    //Apache commons
    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'org.apache.commons:commons-lang3:3.6'
    compile 'commons-logging:commons-logging:1.2'
    compile 'commons-io:commons-io:2.6'
    compile 'commons-pool:commons-pool:1.6'

    testCompile 'junit:junit:4.12'
    testCompile 'org.easymock:easymock:4.0.2'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}

group = 'org.grobid'
version = '0.6.0-SNAPSHOT'
description = 'grobid-ner'
sourceCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    compile.exclude group: "org.slf4j", module: "slf4j-jdk14"
    compile.exclude group: 'org.slf4j', module: "slf4j-log4j12"
    compile.exclude group: 'log4j', module: "log4j"
}


/** Model management **/
task copyModels(type: Copy) {
    from "${rootDir}/resources/models"
    include "**/*.wapiti"
    into "${rootDir}/../grobid-home/models/"
}

/** Training configuration **/
def trainerTasks = [
        //Training models
//        "train_temporalExpression": "org.grobid.trainer.TemporalExpressionTrainer",
        "train_ner"               : "org.grobid.trainer.NEREnglishTrainer",
        "train_nerfr"             : "org.grobid.trainer.NERFrenchTrainer",
        "train_nersense"          : "org.grobid.trainer.SenseTrainer",

        // CONLL
        "eval_conll"              : "org.grobid.trainer.NEREvaluation",
        "train_conll"             : "org.grobid.trainer.CoNNLNERTrainer"
]

trainerTasks.each { taskName, mainClassName ->
    tasks.create(name: taskName, type: JavaExec, group: 'training') {
        main = mainClassName
        classpath = sourceSets.main.runtimeClasspath
    }
}

// return the default value if the property has not been specified in command line
ext.getArg = { propName, defaultVal ->
    return project.hasProperty(propName) ? project.getProperty(propName) : defaultVal;
}

// Train and evaluation NER
// run like: gradle trainEvalNer -gH /path/to/grobid-home
task trainEvalNer(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.NERTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'ner', '-gH', getArg('gH', '../../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// Evaluation NER
// run like: gradle evalNer -gH /path/to/grobid-home
task evalNer(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.NERTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'ner', '-gH', getArg('gH', '../../grobid-home')
    jvmArgs '-Xmx3072m'
}

// Train and evaluation NER FR
// run like: gradle trainEvalNerFr -gH /path/to/grobid-home
task trainEvalNerFr(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.NERTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 2, 'nerfr', '-gH', getArg('gH', '../../grobid-home'), '-s', getArg('s', '0.8')
    jvmArgs '-Xmx3072m'
}

// Evaluation NER FR
// run like: gradle evalNerFr -gH /path/to/grobid-home
task evalNerFr(dependsOn: 'classes', type: JavaExec, group: 'training') {
    main = 'org.grobid.trainer.NERTrainerRunner'
    classpath = sourceSets.main.runtimeClasspath
    args 1, 'nerfr', '-gH', getArg('gH', '../../grobid-home')
    jvmArgs '-Xmx3072m'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task mainJar(type: ShadowJar, group: 'test') {
    zip64 true
    from sourceSets.main.output
    from {
        project.configurations.compile.collect {
//            it.isDirectory() ? [] : localLibs.contains(it.getName()) ? zipTree(it) : []
        }
    }
}

shadowJar {
    classifier = 'onejar'
    zip64 true
    manifest {
        attributes 'Main-Class': 'org.grobid.core.main.batch.NERMain'
    }
}

jar {
    dependsOn mainJar
    enabled false
}

artifacts {
    archives shadowJar
    archives mainJar
}

/*tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
    options.compilerArgs << "-Xlint:unchecked"
}*/




